name: Build and release site

on:
  push:
    branches: [ master ]
  workflow_dispatch:

# Ensure the workflow has permission to write repository contents and pages
permissions:
  contents: write
  pages: write

jobs:
  build-and-release:
    name: Build site and create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Ruby (for Jekyll)
        uses: ruby/setup-ruby@v1
        with:
          # Pick a reasonably recent Ruby version; adjust if your project requires a specific Ruby.
          ruby-version: '3.1'
          cache: 'bundler'

      - name: Install Bundler
        run: gem install bundler

      - name: Bundle install
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Build site with Jekyll
        run: bundle exec jekyll build --destination _site

      - name: Archive generated site
        run: |
          if [ -d "_site" ]; then
            cd _site
            zip -r ../site.zip .
            cd -
          else
            echo "_site directory not found â€” build may have failed"
            exit 1
          fi

      - name: Upload generated site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: _site

      - name: Create release tag variable
        id: create_tag
        run: |
          # Create a unique tag using UTC datetime and short SHA
          SHORT_SHA=${GITHUB_SHA:0:7}
          TAG="v$(date -u +%Y%m%d%H%M%S)-${SHORT_SHA}"
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo "RELEASE_NAME=Site build ${TAG}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.RELEASE_NAME }}
          body: "Automatically generated site build from commit ${{ github.sha }}"
          draft: false
          prerelease: false

      - name: Upload site.zip to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./site.zip
          asset_name: site.zip
          asset_content_type: application/zip

  deploy-to-github-pages:
    name: Deploy to GitHub Pages environment
    runs-on: ubuntu-latest
    needs: build-and-release
    environment: github-pages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built site artifact
        uses: actions/download-artifact@v4
        with:
          name: site
          path: ./site_artifact

      - name: Prepare publish directory
        run: |
          if [ -d "site_artifact/_site" ]; then
            # artifact may contain the folder itself or the contents depending on how it was uploaded
            mv site_artifact/_site site || mv site_artifact site
          else
            mv site_artifact site || true
          fi

      - name: Deploy to master (publish site to bencrouse.com)
        # We clone with a token and rsync the built site into the repository root
        # while preserving `.github` and other metadata. This works for user/org
        # sites like `crousky.github.io` which serve Pages from the default branch.
        env:
          REPO: ${{ github.repository }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CNAME: bencrouse.com
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          echo "Cloning ${REPO} (master)"
          git clone --depth=1 https://x-access-token:${TOKEN}@github.com/${REPO}.git deploy_repo

          # Clean deploy_repo but preserve .github and .git
          cd deploy_repo
          find . -maxdepth 1 ! -name '.' ! -name '.github' ! -name '.git' -exec rm -rf {} + || true
          cd -

          # copy built site into repo root
          rsync -av --delete site/ deploy_repo/

          # ensure CNAME present so Pages keeps the custom domain
          echo "${CNAME}" > deploy_repo/CNAME

          # add .nojekyll to prevent GitHub Pages from rebuilding the site
          # (the site is already built; Pages should serve it as static files)
          touch deploy_repo/.nojekyll

          # commit and push
          cd deploy_repo
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to publish"
          else
            git commit -m "ci: publish site from workflow ${GITHUB_RUN_ID}"
            git push https://x-access-token:${TOKEN}@github.com/${REPO}.git HEAD:master
          fi

# Notes:
# - This workflow builds the site with Jekyll (using the repository Gemfile). It creates a
#   new release on every run (a timestamped tag) and attaches `site.zip` containing the
#   generated `_site` folder.
# - The built site can be downloaded from the Release page.
# - The workflow uses the built-in `GITHUB_TOKEN` so no additional secrets are required to
#   create releases. If you prefer to use a different token with wider permissions, add
#   it as a repository secret and replace `secrets.GITHUB_TOKEN` above.